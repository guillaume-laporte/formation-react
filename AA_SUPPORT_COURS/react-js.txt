Plugins Visual Studio Code utiles
---------------------------------
auto close tag
auto complete tag
auto rename tag
ES7+
ESLint
HTML CSS Support
IntelliSense
JS Snippet
React Extension Pack
React-Native for ES6/ES7
React code snippets
Typescript React code snippets
Git Graph
Jest Test Explorer
Jest Snippets

desorbaix.alexandre.free.fr/tjs2

npx create-react-app app --template=typescript
ca ira chercher le template : cra-template-typescript

cd app
npm start

tsconfig.json : "noImplicitAny": true
https://learngitbranching.js.org/?locale=fr_FR
https://github.com/champix56/2023-06-12-tjs : faire un fork à la fin
npm i -g yarn
imr : raccourci pour importer react dans visual studio code
rfcp : raccourci pour créer un component dans visual studio code
rxslice : raccourci pour créer un slice redux

On peut répartir les components en 3 répertoires pour structurer :
- ui / fonctionnal / layout

!! Faire le composent TS !!

hook / useState / useEffect => Pas compris !

https://github.com/React-Proto/react-proto

npx generate-react-cli (pour générer les components automatique comme angular)
-> par exemple le path : src/App/components
-> npx generate-react-cli c TemplateName
-> dans le generate-react-cli.json on peut rajouter des sections pour créer des template a partir de modèle qu'on a créé nous même, et les placer dans le répertoire ou on le souhaite
-> npx generate-react-cli c --type=xxx Cmp1 Cmp2
-> npx generate-react-cli c --type=layoutFunc FlexV3Grow FlexH1Grow
-> on peut faire un script dans package.json
-> "gen_ui": "npx generate-react-cli c --type=uiFunc",
-> "gen_layout": "npx generate-react-cli c --type=layoutFunc",
-> "gen_generic": "npx generate-react-cli c --type=genericHookedFunc"
-> yarn gen_ui NavBar Header Footer MemeThumbnail
-> yarn gen_generic MemeForm

lancer les tests : yarn test

faire une story (cours avancé) = npx storybook init
-> npm run storybook
-> http://localhost:6006/?path=/story/templatename--default

yarn = npm run

yarn add orsys-tjs-meme
yarn add bootstrap
yarn add react-bootstrap
yarn add react-router-dom

ie edge -> react devtools / redux devtools

yarn add @reduxjs/toolkit react-redux

yarn add json-server
-> lancer un server sur un fichier json pour simuler
-> ajout dans package.json : "json": "json-server -p 7777 db/db.json"
-> npm run json / yarn json :  pour lancer le server

yarc : client REST à installer dans Chrome
